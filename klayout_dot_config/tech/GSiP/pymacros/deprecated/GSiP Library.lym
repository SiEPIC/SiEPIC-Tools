<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>"""
This file is part of the SiEPIC-Tools and SiEPIC-GSiP PDK
by Lukas Chrostowski (c) 2015-2017

This Python file implements a library called "GSiP" 


NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.

Crash warning:
 https://www.klayout.de/forum/comments.php?DiscussionID=734&amp;page=1#Item_13
 This library has nested PCells. Running this macro with a layout open may
 cause it to crash. Close the layout first before running.

Version history:

Lukas Chrostowski 2021/05/19
 - updating the library loading script

Mustafa Hammood 2020/6/25
- Refactored PCells out of library files into individual files in a subdirectory

Lukas Chrostowski 2020/06/21
 - Waveguide update, cellName

Jaspreet Jhoja 2020/5/23
- Refactored PCells to make them compatible with both, GUI and script-based layout operations

Lukas Chrostowski
 - GDS cells (detector, etc) and PCells (ring modulator, filter)

Lukas Chrostowski 2017/12/16
 - compatibility with KLayout 0.25 and SiEPIC-Tools

Stefan Preble and Karl McNulty (RIT) 2019/6/13
 - Wireguide : Path to metal wires 
 
todo:
replace:     
 layout_arc_wg_dbu(self.cell, Layerm1N, x0,y0, r_m1_in, w_m1_in, angle_min_doping, angle_max_doping)
with:
 self.cell.shapes(Layerm1N).insert(pya.Polygon(arc(w_m1_in, angle_min_doping, angle_max_doping) + [pya.Point(0, 0)]).transformed(t))



"""


print('SiEPIC_GSiP_PDK')

import pya
from pya import *
from SiEPIC.utils import get_technology_by_name
import os
import sys
import pathlib


script_file = __file__
if script_file[0]=="'":
  script_file = script_file[1:-2]

dir_path = os.path.dirname(os.path.realpath(script_file))
if dir_path not in sys.path:
    sys.path.append(dir_path)

files = [f for f in os.listdir(os.path.join(os.path.dirname(
    os.path.realpath(script_file)),'pcells_GSiP')) if '.py' in pathlib.Path(f).suffixes  and '__init__' not in f]
import pcells_GSiP ### folder name ###
import importlib
importlib.invalidate_caches()
pcells_=[]
for f in files:
    module = 'pcells_GSiP.%s' % f.replace('.py','')  ### folder name ###
    print(' - found module: %s' % module)
    m = importlib.import_module(module) 
    print(m)
    pcells_.append(importlib.reload(m))
    print(pcells_[-1])

class GSiP(Library):
  """
  The library where we will put the PCells and GDS into 
  """

  def __init__(self):
  
    tech_name = 'GSiP'
    library = tech_name

    print("Initializing '%s' Library." % library)

    # Set the description
    self.description = "SiEPIC Generic SiP, v1.0.1"
                
                
    # Import all the GDS files from the tech folder
    import os, fnmatch
    dir_path = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath(script_file)), "../gds"))
    search_str = '*' + '.oas'
    for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
        for filename in fnmatch.filter([f.lower() for f in filenames], search_str):
            file1=os.path.join(root, filename)
            print(" - reading %s" % file1 )
            self.layout().read(file1)
    search_str = '*' + '.gds'
    for root, dirnames, filenames in os.walk(dir_path, followlinks=True):
        for filename in fnmatch.filter([f.lower() for f in filenames], search_str):
            file1=os.path.join(root, filename)
            print(" - reading %s" % file1 )
            self.layout().read(file1)
        
    # Create the PCell declarations
    for m in pcells_:
        mm = m.__name__.replace('pcells_GSiP.','')
        mm2 = m.__name__+'.'+mm+'()'
        print(' - register_pcell %s, %s' % (mm,mm2))
        self.layout().register_pcell(mm, eval(mm2))
                
    print(' done with pcells')
    
    # Register us the library with the technology name
    # If a library with that name already existed, it will be replaced then.
    self.register(library)

    self.technology=tech_name

#    self.layout().add_meta_info(LayoutMetaInfo("path",os.path.realpath(script_file)))
#    self.layout().add_meta_info(LayoutMetaInfo("technology",tech_name))
 
# Instantiate and register the library
GSiP()


</text>
</klayout-macro>
